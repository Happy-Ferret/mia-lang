use super::{Term, StackTerm, Value};
use kind::{Ty, StackTy};
use kind::{Var, StackVar};

eof = !.

space
  = "\n"
  / "\r\n"
  / "\r"
  / "\u{2028}"
  / "\u{2029}"
  / [ \t\u{00A0}\u{FEFF}\u{1680}\u{180E}\u{2000}-\u{200A}\u{202F}\u{205F}\u{3000}]

spaces = space+


// Expression Syntax

word -> String
  = (!space .)+ { match_str.to_string() }

#[pub]
value -> Value
  = "[" spaces "]" { Value::Quote(StackTerm::empty()) }
  / "[" spaces quoted:stack_term spaces "]" { Value::Quote(quoted) }
  / "true" { Value::Bool(true) }
  / "false" { Value::Bool(false) }
  / n:word {? if let Ok(n) = n.parse() { Ok(Value::Number(n)) } else { Err("number") } }

#[pub]
term -> Term
  = val:value { Term::Push(val) }
  / name:word { Term::Call(name) }

#[pub]
stack_term -> StackTerm
  = terms:((!end_quote term) ** spaces) { StackTerm::new(terms) }

  end_quote = "]" (space / eof)


// Kind Syntax

#[pub]
var -> Var
  = [a-z]+ { Var::new(match_str) }

#[pub]
stack_var -> StackVar
  = [A-Z]+ { StackVar::new(match_str) }

#[pub]
ty -> Ty
  = "bool" { Ty::Bool }
  / "num" { Ty::Number }
  / var:var { Ty::Var(var) }
  / "(" spaces? lhs:stack_ty spaces? "->" spaces? rhs:stack_ty spaces? ")" { Ty::Fun(lhs, rhs) }

#[pub]
stack_ty -> StackTy
  = var:stack_var tys:(spaced_type*) { StackTy::new(var, tys) }

  spaced_type -> Ty
    = spaces ty:ty { ty }
